## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
library(tidyr)
#######################################
# p.211
## 1. 베이스 R의 plot 함수를
## 이용한 [그림 6-21]의 그래프를
## ggplot2 라이브러리를 이용해
## 그려라.
install.packages("dplyr")
install.packages("dplyr")
library(ggplot2)
#######################################
# p.211
## 1. 베이스 R의 plot 함수를
## 이용한 [그림 6-21]의 그래프를
## ggplot2 라이브러리를 이용해
## 그려라.
install.packages("ggplot2")
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather(iris_df, -id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
#######################################
# p.211
## 1. 베이스 R의 plot 함수를
## 이용한 [그림 6-21]의 그래프를
## ggplot2 라이브러리를 이용해
## 그려라.
library(dplyr)
library(ggplot2)
source("D:/University_projects/2023-1/빅데이터 분석 - 이창규/w10.R", echo=TRUE)
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather( -id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
iris_df <- iris
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather( -id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
iris_df <- iris
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather( -id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather(-id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
iris_df <- iris
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather(-id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
#######################################
# p.211
## 1. 베이스 R의 plot 함수를
## 이용한 [그림 6-21]의 그래프를
## ggplot2 라이브러리를 이용해
## 그려라.
library(dplyr)
library(ggplot2)
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather(-id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
## 2. 베이스 R의 matplot 함수를
## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
library(tidyr)
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather(-id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
head(women)
df = women
df.rbind(c(65.5, 121))
library(dplyr)
df = women
df.rbind(c(65.5, 121))
df%>%rbind(c(65.5, 121))
library(dplyr)
df = women
df%>%rbind(c(65.5, 121))
women_model=lm(weight~height, data=df)
plot(women)
abline(women_model, col='red')
df = women
df%>%rbind(c(65.5, 121))
women_df_model=lm(weight~height, data=df)
plot(women)
abline(lm(weight~height, data=women), col='blue')
abline(women_model, col='red')
abline(lm(weight~height, data=women), col='blue')
abline(women_model, col='red')
library(dplyr)
df = women
df%>%rbind(c(65.5, 121))
women_df_model=lm(weight~height, data=df)
plot(women)
abline(lm(weight~height, data=women), col='blue')
abline(women_model, col='red')
library(dplyr)
df = women
df%>%rbind(c(65.5, 121))
women_df_model=lm(weight~height, data=df)
plot(df)
abline(lm(weight~height, data=women), col='blue')
abline(women_model, col='red')
head(cars)
df = cars[-c(20, 22, 23), ]
plot(df)
abline(lm(speed~dist, data=df), col='red')
df = cars[-c(20, 22, 23), ]
plot(df)
abline(lm(dist~speed, data=df), col='red')
muffler=data.frame(
discount=c(2.0, 4.0, 6.0, 8.0, 10.0),
profit=c(0,0,0,1,1))
g=glm(profit~discount, data=muffler, family=binomial)
coef(g)
fitted(g)
residuals(g)
deviance(g)
plot(muffler, pch=20, cex=2)
abline(g, col='blue', lwd=2)
plot(muffler, pch=20, cex)
plot(muffler, pch=20, cex=2)
abline(g, col='blue', cex=2, xlim=c(0,32))
res=data.frame(discount=newd, profit=p)
newd=data.frame(discount=c(1,5,12,20,30))
p=predict(g, newd, type='response')
print(p)
plot(muffler, pch=20, cex=2)
abline(g, col='blue', cex=2, xlim=c(0,32))
res=data.frame(discount=newd, profit=p)
points(res, pch=20, cex=2,col='red')
legend("bottomright", legend=c("train data", "new data"), pch=c(20, 20), cex=2, col=c("black", "red"), bg="gray")
legend("bottomright", legend=c("train data", "new data"), pch=c(20, 20), cex=2, col=c("black", "red"), bg="gray")
newd=data.frame(discount=c(1,5,12,20,30))
p=predict(g, newd, type='response')
print(p)
plot(muffler, pch=20, cex=2)
abline(g, col='blue', cex=2, xlim=c(0,32))
res=data.frame(discount=newd, profit=p)
points(res, pch=20, cex=2,col='red')
legend("bottomright", legend=c("train data", "new data"), pch=c(20, 20), cex=2, col=c("black", "red"), bg="gray")
muffler=data.frame(
discount=c(2.0, 4.0, 6.0, 8.0, 10.0),
profit=c(0,0,0,1,1))
g=glm(profit~discount, data=muffler, family=binomial)
coef(g)
fitted(g)
residuals(g)
deviance(g)
plot(muffler, pch=20, cex=2)
abline(g, col='blue', lwd=2)
newd=data.frame(discount=c(1,5,12,20,30))
p=predict(g, newd, type='response')
print(p)
plot(muffler, pch=20, cex=2)
abline(g, col='blue', cex=2, xlim=c(0,32))
res=data.frame(discount=newd, profit=p)
points(res, pch=20, cex=2,col='red')
legend("bottomright", legend=c("train data", "new data"), pch=c(20, 20), cex=2, col=c("black", "red"), bg="gray")
muffler=data.frame(
discount=c(2.0, 4.0, 6.0, 8.0, 10.0),
profit=c(0,0,0,1,1))
g=glm(profit~discount, data=muffler, family=binomial)
coef(g)
fitted(g)
residuals(g)
deviance(g)
plot(muffler, pch=20, cex=2)
abline(g, col='blue', lwd=2)
newd=data.frame(discount=c(1,5,12,20,30))
p=predict(g, newd, type='response')
print(p)
plot(muffler, pch=20, cex=2)
abline(g, col='blue', cex=2, xlim=c(0,32))
res=data.frame(discount=newd, profit=p)
points(res, pch=20, cex=2,col='red')
haberman = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/haberman/haberman.data", header=FALSE)
h = glm(survival~age+op_year+no_nodes,
data = haberman,
family = binomial)
names(haberman) = c('age','op_year','no_nodes','survival')
h = glm(survival~age+op_year+no_nodes,
data = haberman,
family = binomial)
#1 Haberman survival 데이터를 read.csv로
# 읽을 때 header=FALSE 옵션을 빼고 실행하여
# 270쪽 [NOTE]의 설명을 실제로 확인하라.
haberman = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/haberman/haberman.data",
header=FALSE,
stringAsFactors = TRUE)
#1 Haberman survival 데이터를 read.csv로
# 읽을 때 header=FALSE 옵션을 빼고 실행하여
# 270쪽 [NOTE]의 설명을 실제로 확인하라.
haberman = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/haberman/haberman.data",
header=FALSE,
as.is = FALSE)
names(haberman) = c('age','op_year','no_nodes','survival')
h = glm(survival~age+op_year+no_nodes,
data = haberman,
family = binomial)
str(haberman)
#1 Haberman survival 데이터를 read.csv로
# 읽을 때 header=FALSE 옵션을 빼고 실행하여
# 270쪽 [NOTE]의 설명을 실제로 확인하라.
haberman = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/haberman/haberman.data",
header=FALSE)
names(haberman) = c('age','op_year','no_nodes','survival')
haberman$survival = factor(haberman$survival)
h = glm(survival~age+op_year+no_nodes,
data = haberman,
family = binomial)
coef(h)
deviance(h)
new_patients =
data.frame(age = c(37,66),
op_year = c(58,60),
no_nodes = c(5,32))
predict(h,
newdata = new_patients,
type = 'response')
library(rpart)
r = rpart(Species)
r = rpart(Species~., data=iris)
print(r)
par(mfrow = c(1,1), xpd = NA)
plot(r)
text(r, use.n=TRUE)
print(r)
printcp(r)
clear
p = predict(r, iris, type='class')
table(p, iris$Species)
p = predict(r, iris, type='prob')
table(p, iris$Species)
p = predict(r, iris, type='class')
table(p, iris$Species)
p2 = predict(r, iris, type='prob')
p2
View(p2)
table(p2, iris$Species)
p2 = predict(r, iris, type='prob')
table(p2, iris$Species)
r_prior = rpart(Species~.,
data=iris,
params = list(prior=c(0.1, 0.1, 0.8)))
r_prior = rpart(Species~.,
data=iris,
params = list(prior=c(0.1, 0.1, 0.8)))
r_prior = rpart(Species~.,
data=iris,
parms = list(prior=c(0.1, 0.1, 0.8)))
plot(r_prior)
text(r_prior, use.n=TRUE)
plot(r_prior)
text(r_prior, use.n=TRUE)
text(r_prior, use.n=TRUE)
plot(r_prior)
text(r_prior, use.n=TRUE)
printcp(r_prior)
newd = data.frame(
Sepal.Length = c(5.11,7.01,6.32),
Sepal.Width = c(3.51, 3.2, 3.31),
Petal.Length = c(1.4, 4.71, 6.02),
Petal.Width = c(0.19, 1.4, 2.49)
)
predict(r, newdata=newd)
predict(r_prior, newdata=newd)
summary(r)
summary(r_prior)
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(r)
getwd()
setwd("D:/University_projects/2023-1/빅데이터 분석 - 이창규/project/bigData_project-team_2/data")
employment = read.csv("./DP_LIVE_31052023122129761.csv")
View(employment)
employment = read.csv("./DP_LIVE_31052023122129761.csv", header = TRUE)
employment = read.csv("./DP_LIVE_31052023122129761.csv", quote = "\"", header = TRUE)
View(employment)
employment = read.csv("./DP_LIVE_31052023122129761.csv",
header = TRUE,
quote = "\"",
stringsAsFactors = TRUE)
str(employment)
employment$LOCATION = as.character(employment$LOCATION)
str(employment)
employment = read.csv("./DP_LIVE_31052023122129761.csv",
header = TRUE,
quote = "\"",
stringsAsFactors = TRUE,
is.na="")
employment = read.csv("./DP_LIVE_31052023122129761.csv",
header = TRUE,
quote = "\"",
stringsAsFactors = TRUE)
employment$LOCATION = as.character(employment$LOCATION)
ifelse(employment=="", employment, NA)
employment = ifelse(employment=="", employment, NA)
employment = read.csv("./DP_LIVE_31052023122129761.csv",
header = TRUE,
quote = "\"",
stringsAsFactors = TRUE)
employment$LOCATION = as.character(employment$LOCATION)
employment = ifelse(employment=="", employment, NA)
View(employment)
employment = read.csv("./DP_LIVE_31052023122129761.csv",
header = TRUE,
quote = "\"",
stringsAsFactors = TRUE)
employment$LOCATION = as.character(employment$LOCATION)
View(employment)
str(employment)
employment$TIME = as.integer(employment$TIME)
head(employment)
View(employment)
employment = read.csv("./DP_LIVE_31052023122129761.csv",
header = TRUE,
quote = "\"",
stringsAsFactors = TRUE)
employment = read.csv("./DP_LIVE_31052023122129761.csv",
header = TRUE,
quote = "\"")
employment$LOCATION = as.character(employment$LOCATION)
str(employment)
View(employment)
employment = employment[employment$SUBJECT=="TOT" , -employment$Flag.Codes]
employment = employment[employment$SUBJECT=="TOT" ,]
employment$Flag.Codes <- NULL
employment = employment[employment$SUBJECT=="TOT" ,]
View(employment)
employment$FREQUENCY = factor(employment$FREQUENCY)
str(employment)
employment$INDICATOR = factor(employment$INDICATOR)
str(employment)
employment$INDICATOR <- NULL
str(employment)
View(employment)
View(employment[employment$LOCATION=="CAN", ])
employment = read.csv("./DP_LIVE_31052023122129761.csv",
header = TRUE,
quote = "\"")
employment = employment[employment$SUBJECT=="TOT" && nchar(employment$TIME)==4,]
employment = read.csv("./DP_LIVE_31052023122129761.csv",
header = TRUE,
quote = "\"")
library(dplyr)
employment <- employment %>%
select(-INDICATOR)
employment = read.csv("./DP_LIVE_31052023122129761.csv",
header = TRUE,
quote = "\"")
employment <- employment %>%
select(-INDICATOR, -Flag.Codes)
str(employment)
employment <- employment %>%
select(-INDICATOR, -Flag.Codes) %>%
filter(SUBJECT=="TOT" & nchar(TIME)==4)
employment = read.csv("./DP_LIVE_31052023122129761.csv",
header = TRUE,
quote = "\"")
employment <- employment %>%
select(-INDICATOR, -Flag.Codes) %>%
filter(SUBJECT=="TOT" & nchar(TIME)==4)
str(employment)
View(employment)
View(employment)
univ <- read.csv("./college_entrance_rate.csv", header=TRUE, quote="\"")
View(univ)
employment$TIME = as.integer(employment$TIME)
str(employment)
str(univ)
univ$MEASURE = factor(univ$MEASURE)
str(univ$MEASURE)
univ$INDICATOR = factor(univ$INDICATOR)
str(univ$INDICATOR)
str(univ$MEASURE)
str(univ)
str(factor(univ$SUBJECT))
View(factor(univ$SUBJECT))
View(factor(univ$FREQUENCY))
str(univ)
univ$INDICATOR, univ$MEASURE, univ$FREQUENCY, univ$Flag.Codes = NULL
univ <- read.csv("./college_entrance_rate.csv", header=TRUE, quote="\"")
univ$INDICATOR <- NULL
univ$MEASURE <- NULL
univ$FREQUENCY <- NULL
univ$Flag.Codes <- NULL
str(univ)
univ <- read.csv("./college_entrance_rate.csv", header=TRUE, quote="\"")
View(univ)
View(univ%>%filter(LOCATION=="CAN"))
univ %>%
select(-INDICATOR, -MEASURE, -FREQUENCY, -Flag.Codes) %>%
filter(grepl("MEN")==FALSE && grepl("WOMEN"))
univ %>%
select(-INDICATOR, -MEASURE, -FREQUENCY, -Flag.Codes) %>%
filter(grepl("MEN", SUBJECT)==FALSE && grepl("WOMEN" ,SUBJECT))
univ <- read.csv("./college_entrance_rate.csv", header=TRUE, quote="\"")
univ %>%
select(-INDICATOR, -MEASURE, -FREQUENCY, -Flag.Codes) %>%
filter(grepl("MEN", SUBJECT)==FALSE && grepl("WOMEN" ,SUBJECT))
univ %>%
select(-INDICATOR, -MEASURE, -FREQUENCY, -Flag.Codes) %>%
filter(grepl("MEN", SUBJECT)==FALSE & grepl("WOMEN" ,SUBJECT))
univ <- read.csv("./college_entrance_rate.csv", header=TRUE, quote="\"")
univ %>%
select(-INDICATOR, -MEASURE, -FREQUENCY, -Flag.Codes) %>%
filter(grepl("MEN", SUBJECT)==FALSE & grepl("WOMEN" ,SUBJECT))
univ %>%
select(-INDICATOR, -MEASURE, -FREQUENCY, -Flag.Codes) %>%
filter(grepl("MEN", SUBJECT)==FALSE & grepl("WOMEN" ,SUBJECT)==FALSE)
univ <- univ %>%
select(-INDICATOR, -MEASURE, -FREQUENCY, -Flag.Codes) %>%
filter(grepl("MEN", SUBJECT)==FALSE & grepl("WOMEN" ,SUBJECT)==FALSE)
str(univ)
View(univ%>%filter(LOCATION=="CAN"))
employment = read.csv("./Employment_rate.csv",
header = TRUE,
quote = "\"")
str(employment)
employment <- employment %>%
filter(SUBJECT=="TOT" & nchar(TIME)==4 & MEASURE=="PC_WKGPOP") %>%
select(LOCATION, TIME, Value)
str(employment)
View(employment)
employment$TIME = as.integer(employment$TIME)
str(employment)
View(employment)
univ <- univ %>%
select(-INDICATOR, -MEASURE, -FREQUENCY, -Flag.Codes) %>%
filter(grepl("MEN", SUBJECT)==FALSE & grepl("WOMEN" ,SUBJECT)==FALSE)
univ <- read.csv("./college_entrance_rate.csv", header=TRUE, quote="\"")
univ <- univ %>%
select(-INDICATOR, -MEASURE, -FREQUENCY, -Flag.Codes) %>%
filter(grepl("MEN", SUBJECT)==FALSE & grepl("WOMEN" ,SUBJECT)==FALSE)
View(univ)
View(univ)
str(factor(univ$SUBJECT))
##################
#대학 진학률
univ <- read.csv("./college_entrance_rate.csv", header=TRUE, quote="\"")
univ <- univ %>%
select(-INDICATOR, -MEASURE, -FREQUENCY, -Flag.Codes) %>%
filter(SUBJECT=="25_34")
View(univ)
str(univ)
str(employment)
##################
# 병합
df1 <- merge(employment, univ, by=c("LOCATION", "TIME"))
str(df1)
names(employment)[names(employment)=="Value"] <- "Employment_rate"
names(univ)[names(univ)=="Value"] = "univ_rate"
##################
# 병합
df1 <- merge(employment, univ, by=c("LOCATION", "TIME"))
str(df1)
df <- df1 %>%
select(univ_rate, Employment_rate)
save(df1, file="./df.rda")
load("./df.rda")
install.packages("caret")
library(caret)
library(caret)
str(df)
library(dplyr)
test <- df %>% anti_join(train)
test
)
)
train <- sample_frac(df, size=0.7)
test <- df %>% anti_join(train)
test
?knn.reg
?knnreg
model <- knnreg(Employment_rate~univ_rate,
data = df)
model
predict(model, test$univ_rate)
predict(model,
newdata=test$univ_rate)
plot(model)
model <- knnreg(Employment_rate~univ_rate,
data = df)
plot(model)
model
p1 <- predict(model, newdata=test$univ_rate)
?predict
p1 <- predict(model, test$univ_rate)
train <- sample_frac(df, size=0.7)
test <- df %>% anti_join(train)
model <- knnreg(Employment_rate~univ_rate,
data = df)
p1 <- predict(model, test$univ_rate)
p1 <- predict(model, test[,c("univ_rate")])
test[,c("univ_rate")]
p1 <- predict(model, test[,c("univ_rate")])
