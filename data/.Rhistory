## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
matplotlib(iris[, 1:4], type="l")
## 2. 베이스 R의 matplot 함수를
## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
matplot(iris[, 1:4], type="l")
legend("topleft", names(iris)[1:4], lty=c(1:4), col=c(1:4))
iris_df <- iris
iris_df[, 1:4] %>%
cbind(id = rownames(iris)) %>%
melt(id.vars=c("id", "Species")) %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
## 2. 베이스 R의 matplot 함수를
## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
install.packages("reshape2")
library(reshape2)
iris_df[, 1:4] %>%
cbind(id = rownames(iris)) %>%
melt(id.vars=c("id", "Species")) %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
iris_df
str(iris)
iris_df[, 1:4] %>%
cbind(id = rownames(iris)) %>%
melt(id.vars=c("id", "Species")) %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
rialbe
iris_df[, 1:4] %>%
cbind(id = rownames(iris)) %>%
gather(-id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
library(tidyr)
iris_df[, 1:4] %>%
cbind(id = rownames(iris)) %>%
gather(-id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
library(tidyr)
install.packages("tidyr")
install.packages("tidyr")
## 2. 베이스 R의 matplot 함수를
## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
library(tidyr)
iris_df[, 1:4] %>%
cbind(id = rownames(iris)) %>%
gather(-id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
library(dplyr)
iris_df[, 1:4] %>%
cbind(id = rownames(iris)) %>%
gather(-id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
library(ggplot2)
iris_df[, 1:4] %>%
cbind(id = rownames(iris)) %>%
gather(-id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
iris_df[, 1:4] %>%
cbind(id = rownames(iris)) %>%
gather(-id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
## 2. 베이스 R의 matplot 함수를
## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
library(tidyr)
iris_df[, 1:4] %>%
cbind(id = rownames(iris)) %>%
gather(-id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather(-id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
iris_df <- gather(-id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
iris_df <- gather(-id, -Species, key="measure", value="value")
iris_df <- gather(iris_df, -id, -Species, key="measure", value="value")
## 2. 베이스 R의 matplot 함수를
## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
library(tidyr)
## 2. 베이스 R의 matplot 함수를
## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
install.packages("tidyr")
install.packages("tidyr")
## 2. 베이스 R의 matplot 함수를
## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
library(tidyr)
## 2. 베이스 R의 matplot 함수를
## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
library(tidyr)
library(dplyr)
library(ggplot2)
## 2. 베이스 R의 matplot 함수를
## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
library(tidyr)
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather(iris_df, -id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
## 2. 베이스 R의 matplot 함수를
## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
library(tidyr)
library(vctrs)
install.packages("vctrs")
## 2. 베이스 R의 matplot 함수를
## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
library(tidyr)
library(vctrs)
## 2. 베이스 R의 matplot 함수를
## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
library(tidyr)
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather(iris_df, -id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
library(dplyr)
library(ggplot2)
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather(iris_df, -id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
## 2. 베이스 R의 matplot 함수를
## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
library(tidyr)
install.packages("vctrs")
version
check.for.updates.R()
library(installr)
check.for.updates.R()
library(installr)
install.packages("installr")
library(installr)
check.for.updates.R()
## 2. 베이스 R의 matplot 함수를
## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
library(tidyr)
## 2. 베이스 R의 matplot 함수를
## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
install.packages("tidyr")
## 2. 베이스 R의 matplot 함수를
## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
library(tidyr)
#######################################
# p.211
## 1. 베이스 R의 plot 함수를
## 이용한 [그림 6-21]의 그래프를
## ggplot2 라이브러리를 이용해
## 그려라.
install.packages("dplyr")
install.packages("dplyr")
library(ggplot2)
#######################################
# p.211
## 1. 베이스 R의 plot 함수를
## 이용한 [그림 6-21]의 그래프를
## ggplot2 라이브러리를 이용해
## 그려라.
install.packages("ggplot2")
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather(iris_df, -id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
#######################################
# p.211
## 1. 베이스 R의 plot 함수를
## 이용한 [그림 6-21]의 그래프를
## ggplot2 라이브러리를 이용해
## 그려라.
library(dplyr)
library(ggplot2)
source("D:/University_projects/2023-1/빅데이터 분석 - 이창규/w10.R", echo=TRUE)
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather( -id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
iris_df <- iris
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather( -id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
iris_df <- iris
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather( -id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather(-id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
iris_df <- iris
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather(-id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
#######################################
# p.211
## 1. 베이스 R의 plot 함수를
## 이용한 [그림 6-21]의 그래프를
## ggplot2 라이브러리를 이용해
## 그려라.
library(dplyr)
library(ggplot2)
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather(-id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
## 2. 베이스 R의 matplot 함수를
## 이용한 [그림 6-27]의 그래프를
## ggplot2 라이브러리를 이용해 그려라
library(tidyr)
iris_df[, 1:4] %>%
cbind(id = rownames(iris_df)) %>%
gather(-id, -Species, key="measure", value="value") %>%
ggplot(aes(x=id, y=value, color = varialbe)) +
geom_line()
head(women)
df = women
df.rbind(c(65.5, 121))
library(dplyr)
df = women
df.rbind(c(65.5, 121))
df%>%rbind(c(65.5, 121))
library(dplyr)
df = women
df%>%rbind(c(65.5, 121))
women_model=lm(weight~height, data=df)
plot(women)
abline(women_model, col='red')
df = women
df%>%rbind(c(65.5, 121))
women_df_model=lm(weight~height, data=df)
plot(women)
abline(lm(weight~height, data=women), col='blue')
abline(women_model, col='red')
abline(lm(weight~height, data=women), col='blue')
abline(women_model, col='red')
library(dplyr)
df = women
df%>%rbind(c(65.5, 121))
women_df_model=lm(weight~height, data=df)
plot(women)
abline(lm(weight~height, data=women), col='blue')
abline(women_model, col='red')
library(dplyr)
df = women
df%>%rbind(c(65.5, 121))
women_df_model=lm(weight~height, data=df)
plot(df)
abline(lm(weight~height, data=women), col='blue')
abline(women_model, col='red')
head(cars)
df = cars[-c(20, 22, 23), ]
plot(df)
abline(lm(speed~dist, data=df), col='red')
df = cars[-c(20, 22, 23), ]
plot(df)
abline(lm(dist~speed, data=df), col='red')
muffler=data.frame(
discount=c(2.0, 4.0, 6.0, 8.0, 10.0),
profit=c(0,0,0,1,1))
g=glm(profit~discount, data=muffler, family=binomial)
coef(g)
fitted(g)
residuals(g)
deviance(g)
plot(muffler, pch=20, cex=2)
abline(g, col='blue', lwd=2)
plot(muffler, pch=20, cex)
plot(muffler, pch=20, cex=2)
abline(g, col='blue', cex=2, xlim=c(0,32))
res=data.frame(discount=newd, profit=p)
newd=data.frame(discount=c(1,5,12,20,30))
p=predict(g, newd, type='response')
print(p)
plot(muffler, pch=20, cex=2)
abline(g, col='blue', cex=2, xlim=c(0,32))
res=data.frame(discount=newd, profit=p)
points(res, pch=20, cex=2,col='red')
legend("bottomright", legend=c("train data", "new data"), pch=c(20, 20), cex=2, col=c("black", "red"), bg="gray")
legend("bottomright", legend=c("train data", "new data"), pch=c(20, 20), cex=2, col=c("black", "red"), bg="gray")
newd=data.frame(discount=c(1,5,12,20,30))
p=predict(g, newd, type='response')
print(p)
plot(muffler, pch=20, cex=2)
abline(g, col='blue', cex=2, xlim=c(0,32))
res=data.frame(discount=newd, profit=p)
points(res, pch=20, cex=2,col='red')
legend("bottomright", legend=c("train data", "new data"), pch=c(20, 20), cex=2, col=c("black", "red"), bg="gray")
muffler=data.frame(
discount=c(2.0, 4.0, 6.0, 8.0, 10.0),
profit=c(0,0,0,1,1))
g=glm(profit~discount, data=muffler, family=binomial)
coef(g)
fitted(g)
residuals(g)
deviance(g)
plot(muffler, pch=20, cex=2)
abline(g, col='blue', lwd=2)
newd=data.frame(discount=c(1,5,12,20,30))
p=predict(g, newd, type='response')
print(p)
plot(muffler, pch=20, cex=2)
abline(g, col='blue', cex=2, xlim=c(0,32))
res=data.frame(discount=newd, profit=p)
points(res, pch=20, cex=2,col='red')
legend("bottomright", legend=c("train data", "new data"), pch=c(20, 20), cex=2, col=c("black", "red"), bg="gray")
muffler=data.frame(
discount=c(2.0, 4.0, 6.0, 8.0, 10.0),
profit=c(0,0,0,1,1))
g=glm(profit~discount, data=muffler, family=binomial)
coef(g)
fitted(g)
residuals(g)
deviance(g)
plot(muffler, pch=20, cex=2)
abline(g, col='blue', lwd=2)
newd=data.frame(discount=c(1,5,12,20,30))
p=predict(g, newd, type='response')
print(p)
plot(muffler, pch=20, cex=2)
abline(g, col='blue', cex=2, xlim=c(0,32))
res=data.frame(discount=newd, profit=p)
points(res, pch=20, cex=2,col='red')
haberman = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/haberman/haberman.data", header=FALSE)
h = glm(survival~age+op_year+no_nodes,
data = haberman,
family = binomial)
names(haberman) = c('age','op_year','no_nodes','survival')
h = glm(survival~age+op_year+no_nodes,
data = haberman,
family = binomial)
#1 Haberman survival 데이터를 read.csv로
# 읽을 때 header=FALSE 옵션을 빼고 실행하여
# 270쪽 [NOTE]의 설명을 실제로 확인하라.
haberman = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/haberman/haberman.data",
header=FALSE,
stringAsFactors = TRUE)
#1 Haberman survival 데이터를 read.csv로
# 읽을 때 header=FALSE 옵션을 빼고 실행하여
# 270쪽 [NOTE]의 설명을 실제로 확인하라.
haberman = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/haberman/haberman.data",
header=FALSE,
as.is = FALSE)
names(haberman) = c('age','op_year','no_nodes','survival')
h = glm(survival~age+op_year+no_nodes,
data = haberman,
family = binomial)
str(haberman)
#1 Haberman survival 데이터를 read.csv로
# 읽을 때 header=FALSE 옵션을 빼고 실행하여
# 270쪽 [NOTE]의 설명을 실제로 확인하라.
haberman = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/haberman/haberman.data",
header=FALSE)
names(haberman) = c('age','op_year','no_nodes','survival')
haberman$survival = factor(haberman$survival)
h = glm(survival~age+op_year+no_nodes,
data = haberman,
family = binomial)
coef(h)
deviance(h)
new_patients =
data.frame(age = c(37,66),
op_year = c(58,60),
no_nodes = c(5,32))
predict(h,
newdata = new_patients,
type = 'response')
library(rpart)
r = rpart(Species)
r = rpart(Species~., data=iris)
print(r)
par(mfrow = c(1,1), xpd = NA)
plot(r)
text(r, use.n=TRUE)
print(r)
printcp(r)
clear
p = predict(r, iris, type='class')
table(p, iris$Species)
p = predict(r, iris, type='prob')
table(p, iris$Species)
p = predict(r, iris, type='class')
table(p, iris$Species)
p2 = predict(r, iris, type='prob')
p2
View(p2)
table(p2, iris$Species)
p2 = predict(r, iris, type='prob')
table(p2, iris$Species)
r_prior = rpart(Species~.,
data=iris,
params = list(prior=c(0.1, 0.1, 0.8)))
r_prior = rpart(Species~.,
data=iris,
params = list(prior=c(0.1, 0.1, 0.8)))
r_prior = rpart(Species~.,
data=iris,
parms = list(prior=c(0.1, 0.1, 0.8)))
plot(r_prior)
text(r_prior, use.n=TRUE)
plot(r_prior)
text(r_prior, use.n=TRUE)
text(r_prior, use.n=TRUE)
plot(r_prior)
text(r_prior, use.n=TRUE)
printcp(r_prior)
newd = data.frame(
Sepal.Length = c(5.11,7.01,6.32),
Sepal.Width = c(3.51, 3.2, 3.31),
Petal.Length = c(1.4, 4.71, 6.02),
Petal.Width = c(0.19, 1.4, 2.49)
)
predict(r, newdata=newd)
predict(r_prior, newdata=newd)
summary(r)
summary(r_prior)
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(r)
load("./df.rda")
setwd('D:/University_projects/2023-1/빅데이터 분석 - 이창규/project/bigData_project-team_2/data')
load("./df.rda")
df <- select(df1, -LOCATION, -TIME)
library(dplyr)
df <- select(df1, -LOCATION, -TIME)
avg <- data.frame(
Employment_rate = mean(df$Employment_rate),
univ_rate = mean(df$univ_rate),
gdp = mean(df$gdp),
work_pop=mean(df$work_pop),
avg_wages = mean(df$avg_wages)
)
df %>% select(univ_rate, Employment_rate) %>%
ggplot(aes(x=univ_rate, y=Employment_rate)) +
geom_point()
library(caret)
library(rsample)
set.seed(123)
data_split <- initial_split(df, prop=0.8)
train <- training(data_split)
test <- testing(data_split)
knnModel <- knnreg(Employment_rate~.,data = train, k=13)
p1 <- predict(knnModel, select(test, -Employment_rate))
mean((test$Employment_rate - p1)^2)
KOR_data <- df1 %>% filter(LOCATION=="DEU")
KOR_predict <- cbind(select(KOR_data, -Employment_rate), Employment_rate = predict(knnModel, select(KOR_data, -LOCATION, -TIME, -Employment_rate)))
ggplot() +
geom_point(data=KOR_data, aes(x=TIME, y=Employment_rate), color='blue')+
geom_line(data=KOR_data, aes(x=TIME, y=Employment_rate), color='blue') +
geom_point(data=KOR_predict, aes(x=TIME, y=Employment_rate), color='green')+
geom_line(data=KOR_predict, aes(x=TIME, y=Employment_rate), color='green')
KOR_data <- df1 %>% filter(LOCATION=="AUS")
KOR_predict <- cbind(select(KOR_data, -Employment_rate), Employment_rate = predict(knnModel, select(KOR_data, -LOCATION, -TIME, -Employment_rate)))
ggplot() +
geom_point(data=KOR_data, aes(x=TIME, y=Employment_rate), color='blue')+
geom_line(data=KOR_data, aes(x=TIME, y=Employment_rate), color='blue') +
geom_point(data=KOR_predict, aes(x=TIME, y=Employment_rate), color='green')+
geom_line(data=KOR_predict, aes(x=TIME, y=Employment_rate), color='green')
KOR_data <- df1 %>% filter(LOCATION=="KOR")
KOR_predict <- cbind(select(KOR_data, -Employment_rate), Employment_rate = predict(knnModel, select(KOR_data, -LOCATION, -TIME, -Employment_rate)))
ggplot() +
geom_point(data=KOR_data, aes(x=TIME, y=Employment_rate), color='blue')+
geom_line(data=KOR_data, aes(x=TIME, y=Employment_rate), color='blue') +
geom_point(data=KOR_predict, aes(x=TIME, y=Employment_rate), color='green')+
geom_line(data=KOR_predict, aes(x=TIME, y=Employment_rate), color='green')
data <- df1 %>%
filter(LOCATION=="KOR") %>%
cbind(predEmp = predict(knnModel, select(KOR_data, -LOCATION, -TIME, -Employment_rate)))
ggplot() +
geom_point(data=data, aes(x=TIME, y=Employment_rate), color='blue')+
geom_line(data=data, aes(x=TIME, y=Employment_rate), color='blue') +
geom_point(data=data, aes(x=TIME, y=predEmp), color='green')+
geom_line(data=data, aes(x=TIME, y=predEmp), color='green')
View(data)
